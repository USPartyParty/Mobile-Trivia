import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// Context Providers (assuming similar structure to tablet, adjust paths as needed)
import { SocketProvider } from './context/SocketContext';
import { GameStateProvider } from './context/GameStateContext';
import { ToastProvider } from './context/ToastContext';

// Components
import { ErrorBoundary } from './components/ErrorBoundary'; // Shared or mobile-specific
import MobileAppLayout from './components/layout/MobileAppLayout';

// Pages
import JoinPage from './pages/JoinPage';
import GamePlayPage from './pages/GamePlayPage';
import ResultsPage from './pages/ResultsPage';
import NotFoundPage from './pages/NotFoundPage'; // Can be shared or mobile-specific

// Styles
import './styles/index.css'; // Mobile-specific global styles

// Environment variables
const isDevelopment = import.meta.env.DEV;
const VITE_APP_VERSION = import.meta.env.VITE_APP_VERSION || '0.1.0';

// Global error handler for uncaught exceptions in production
if (!isDevelopment) {
  window.addEventListener('error', (event) => {
    console.error('Global error (mobile):', event.error);
    // TODO: Integrate with an error tracking service like Sentry
  });

  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection (mobile):', event.reason);
    // TODO: Integrate with an error tracking service
  });
}

console.log(`Taps Tokens Trivia - Mobile App v${VITE_APP_VERSION} initializing...`);

// Root element
const container = document.getElementById('root');

if (!container) {
  throw new Error('Root element (#root) not found in HTML. Ensure it exists.');
}

// Create root using React 18's new API
const root = createRoot(container);

// Render the mobile application
root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <ToastProvider defaultPosition="top-center" maxToasts={3}>
        <SocketProvider>
          <GameStateProvider>
            <BrowserRouter>
              <MobileAppLayout>
                <Routes>
                  <Route path="/" element={<Navigate to="/join" replace />} />
                  <Route path="/join" element={<JoinPage />} />
                  <Route path="/join/:sessionId" element={<JoinPage />} />
                  <Route path="/game/:sessionId" element={<GamePlayPage />} />
                  <Route path="/results/:sessionId" element={<ResultsPage />} />
                  <Route path="/404" element={<NotFoundPage />} />
                  <Route path="*" element={<Navigate to="/404" replace />} />
                </Routes>
              </MobileAppLayout>
            </BrowserRouter>
          </GameStateProvider>
        </SocketProvider>
      </ToastProvider>
    </ErrorBoundary>
  </React.StrictMode>
);

// PWA Service Worker Registration
if ('serviceWorker' in navigator && !isDevelopment) {
  window.addEventListener('load', () => {
    navigator.serviceWorker
      .register('/sw.js', { scope: '/' }) // Ensure sw.js is generated by VitePWA
      .then((registration) => {
        console.log('Service Worker registered with scope:', registration.scope);
      })
      .catch((error) => {
        console.error('Service Worker registration failed:', error);
      });
  });
}
